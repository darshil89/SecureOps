// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {

  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  image         String?
  name          String?
  email         String?   @unique
  age           String?
  gender        Gender?
  phone         String?
  address       String?
  adhar         String?
  emailVerified DateTime?
  verified      Boolean   @default(false)
  role          Role

  // guard specific
  geoLocation Geofence?
  prevExperience PreviousExperience[]
  ratingsReceived Rating[] @relation(name: "RatingUser")   

  // user specific 
  ratingsGiven    Rating[] @relation(name: "ReviewerUser")

  // agency specific
  agencyId String? @db.ObjectId
  agency   Agency? @relation(fields: [agencyId], references: [id])

  attendances Attendance[]
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PreviousExperience {
    id String  @id @default(auto()) @map("_id") @db.ObjectId
    workPlace String
    experinceYears Int 
    joiningData String
    userId String @db.ObjectId
    user User   @relation(fields: [userId], references: [id])
}
    
model Rating {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  guardId   String  @db.ObjectId
  guard     User    @relation(name : "RatingUser" ,  fields: [guardId], references: [id])
  rating    Float   @default(0) 
  reviewerId String @db.ObjectId
  reviewer User @relation( name : "ReviewerUser" , fields: [reviewerId] , references: [id])
  comment   String?
  ratedAt   DateTime @default(now())
}
model Geofence {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  latitude       Float
  longitude      Float
  radiusMeters   Int
  entryTimestamp DateTime?
  exitTimestamp  DateTime?
  status         String // "inside" or "outside"

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Agency {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  address     String
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attendance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  checkIn     DateTime
  checkOut    DateTime
  location    String // if true then we got the location
  present     Boolean // true
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  GUARD
  AGENCY
  POLICE
  USER
}

// just for google auth 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}